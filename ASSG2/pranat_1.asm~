section .bss
  num: resw 1 ;For storing a number, to be read of printed....
  nod: resb 1 ;For storing the number of digits....
  temp: resb 2
  array1: resw 50
  size1: resw 1
  i: resb 1
  j: resb 1

section .text
  msg1: db "Enter the number of elements in the array : "
  siz1: equ $-msg1
  msg2:  db "Enter the elements one by one"
  size2: equ $-msg2
  space: db  " "

section .text
  global _start

_start:
  mov eax, 4
  mov ebx, 1
  mov ecx, msg1
  mov edx, siz1
  int 80h

  mov ecx, 0
  call read_num
  mov cx, word[num]
  mov word[size1], cx

  push ecx

  mov eax, 4
  mov ebx, 1
  mov ecx, msg2
  mov edx, size2
  int 80h

  pop ecx ;Array length in ecx, so we can loop to read elements
  ;Reading the array elements....
  mov eax, 0
  mov ebx, array1

  read_element:
    call read_num
    mov dx , word[num]
    ;eax will contain the array index and each element is 2 bytes(1 word) long
    mov  word[ebx + 2 * eax], dx
    inc eax    ;Incrementing array index by one....
  loop read_element

  movzx ecx,word[size1]
  mov ebx, array1
  mov byte[i], 0

i_loop:
  mov byte[j], 0
  j_loop:
    mov ebx,array1
    movzx eax, byte[j]
    add ebx, eax
    mov eax, ebx
    add eax, 1
    mov dl, byte[ebx]
    mov dh, byte[eax]
    cmp dh, dl
    jl swap
    jmp no_swap

    swap:
      mov byte[ebx], dh
      mov byte[eax], dl

no_swap:
    inc byte[j]
    mov ax,word[size1]
    sub al, byte[i]
    sub al, 1
    cmp byte[j], al
    jl j_loop

  inc byte[i]
  cmp byte[i],2
jl i_loop



 mov dl,byte[ebx]
 mov word[size1],dx

 add word[size1],30h
 mov eax,4
 mov ebx,1
 mov ecx,size1
 mov edx,1
 int 80h

exit:
  mov eax, 1
  mov ebx, 0
  int 80h

read_num:

  pusha
  mov word[num], 0

  loop_read:
    mov eax, 3
    mov ebx, 0
    mov ecx, temp
    mov edx, 1
    int 80h

    cmp byte[temp], 10
      je end_read

    mov ax, word[num]
    mov bx, 10
    mul bx
    mov bl, byte[temp]
    sub bl, 30h
    mov bh, 0
    add ax, bx
    mov word[num], ax
    jmp loop_read
  end_read:
  popa

ret
