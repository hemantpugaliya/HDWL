section .data
	msg1: db "Enter a string",10
	len1: equ $-msg1
	
	msg2: db "The string with each word reversed",10
	len2: equ $-msg2
	
section .bss
	temp: resb 1
	sizet: resw 1
	str: resb 500
	str2: resb 500
	stword: resb 30
	sizew: resw 1
	num: resw 1
	flag: resb 1
section .text
	global _start
_start:
   mov eax, 4
mov ebx, 1
mov ecx, msg1
mov edx, len1
int 80h
mov word[sizet],0
mov byte[flag],0

	
	mov edi, str
	cld
	
loop:	
	mov eax, 3
	mov ebx, 0
	mov ecx, temp
	mov edx, 1
	int 80h
	
	cmp byte[temp], 10
		je end_read
	
	inc word[sizet]
	mov al, byte[temp]
	stosb
	jmp loop
	
end_read:
	mov al,0
	stosb

mov edi,str2
mov esi,str
cld

read_word:
mov edx,stword
mov word[sizew],0

extr_word:
lodsb

cmp al, ' '
je end_word
cmp al,0
je end_word

mov byte[edx],al
inc edx
inc word[sizew]
jmp extr_word

end_word:
cmp al,0
je set

proceed:
mov ecx,0
mov cx,word[sizew]

store:
mov al,byte[edx]
stosb
dec edx
loop store

cmp byte[flag],1
je output

mov al,' '
stosb

  output:
 mov eax, 4
mov ebx, 1
mov ecx, msg2
mov edx, len2
int 80h
     
  mov eax, 4
mov ebx, 1
mov ecx, str2
mov edx, sizet
int 80h
     
     exit:
     mov eax, 1
     mov ebx, 0
     int 80h

set:
mov byte[flag],1
jmp proceed
