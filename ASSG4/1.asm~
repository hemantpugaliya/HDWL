section .bss
  num: resw 1 ;For storing a number, to be read of printed....
  nod: resb 1 ;For storing the number of digits....
  temp: resb 2
  matrix1: resw 200
  matrix2: resw 200
  m: resw 1
  n: resw 1
  i: resw 1
  j: resw 1
  sign: resb 1
  flag: resb 1
  
section .data
  msg1: db "Enter the number of rows in the matrices : "
  msg_size1: equ $-msg1
  msg2:  db "Enter the elements one by one(row by row) : "
  msg_size2: equ $-msg2
  msg3: db "Enter the number of columns in the matrices : "
  msg_size3: equ $-msg3
  input:  db "%hd",0
  new_line: db 10 ;ASCII for new line
  minus: db "-"
  newline: db " ",0Ah
  
  iden: db "The given matrix is an identitiy matrix",10
  iden_len: equ $-iden
  
  noniden:  db "The given matrix not an identitiy matrix",10
  noniden_len: equ $-noniden
  square:  db "The matrix should be a square matrix",10
  sq_len: equ $-square
section .text
  global _start
  extern scanf
_start:

  mov byte[sign], 0
  mov eax, 4
  mov ebx, 1
  mov ecx, msg1
  mov edx, msg_size1
  int 80h
  
  mov ecx, 0
  call read_num  
  mov cx, word[num]
  mov word[m], cx
  
  
  mov eax, 4
  mov ebx, 1
  mov ecx, msg3
  mov edx, msg_size3
  int 80h
  
  mov ecx, 0
  call read_num  
  mov cx, word[num]
  mov word[n], cx
  
  cmp cx,word[m]
  jne sq
  
  mov eax, 4
  mov ebx, 1
  mov ecx, msg2
  mov edx, msg_size2
  int 80h
  
  ;Reading each element of the matrix........
  mov eax, 0
  mov ebx, matrix1  
  
  mov word[i], 0
  mov word[j], 0
  
  
  i_loop:
    mov word[j], 0
    call print_newline
    j_loop:
 
 call read_num
 mov dx , word[num]
 ;eax will contain the array index and each element is 2 bytes(1 word) long
 mov  word[ebx + 2 * eax], dx
 inc eax    ;Incrementing array index by one....
 
 inc word[j]
 mov cx, word[j]
 cmp cx, word[n]
 jb j_loop
 
    inc word[i]
    mov cx, word[i]
    cmp cx, word[m]
    jb i_loop
 

 mov eax, 0
 mov edx, matrix1
  
  mov word[i], 0
  mov word[j], 0
  
  
  i_loop4:
    mov word[j], 0
    j_loop4:
		mov cx, word[edx + 2 * eax]
		mov bx,word[j]
		cmp bx,word[i]
		je check
		
		cmp cx,0
		jne nonid
		jmp pos
check:
cmp cx,1
 jne nonid
		
		
pos:		 
 inc eax    ;Incrementing array index by one....
 inc word[j]
 mov cx, word[j]
 cmp cx, word[n]
 jb j_loop4
 
    inc word[i]
    mov cx, word[i]
    cmp cx, word[m]
    jb i_loop4  
    
  mov eax, 4
  mov ebx, 1
  mov ecx, iden
  mov edx,iden_len
  int 80h
  jmp exit
  
  nonid:
  mov eax, 4
  mov ebx, 1
  mov ecx, noniden
  mov edx, noniden_len
  int 80h
  jmp exit
  
  sq:
  mov eax, 4
  mov ebx, 1
  mov ecx, square
  mov edx, sq_len
  int 80h

exit:
  mov eax, 1
  mov ebx, 0
  int 80h

  
  
;Function to read a 16bit number
    read_num:

  pusha
  extern scanf
  push num
  push input
  call scanf
  add esp, 8
  
  popa
  ret

;Function to print 16bit number
print_num:
  pusha
  cmp word[num],0
  jl negative
  je zero
  resume: mov byte[nod],0
  extract_no:
    cmp word[num], 0
    je print_no
    inc byte[nod]
    mov edx, 0
    mov ebx,0
    mov ax, word[num]
    mov bx, 10
    div bx
    push dx
    mov word[num], ax
  jmp extract_no


  print_no:
    
    cmp byte[nod], 0
    je end_print
    dec byte[nod]
    pop dx
    mov byte[temp],dl
    add byte[temp], 30h


    mov eax, 4
    mov ebx, 1
    mov ecx, temp
    mov edx, 1
    int 80h
    
    jmp print_no
    
negative:
 call sign_invert
 jmp resume
 
 zero:
 mov byte[temp],30h
    mov eax, 4
    mov ebx, 1
    mov ecx, temp
    mov edx, 1
    int 80h
 
 
  end_print:   
  popa
  ret 
 sign_invert:
  pusha
   mov eax, 4
    mov ebx, 1
    mov ecx, minus
    mov edx, 1
    int 80h
  mov ax,word[num]
  mov bx,-1
  mul bx
  mov word[num],ax
  popa
  ret
  
  print_newline:
  pusha
  mov eax, 4
    mov ebx, 1
    mov ecx, newline
    mov edx, 2
    int 80h
  popa 
  ret
