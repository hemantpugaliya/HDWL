section .data
	msg1: db "Enter a string",10
	len1: equ $-msg1
	msg2: db "The string with each word reversed",10
	len2: equ $-msg2
	minus: db "-"
	
section .bss
	temp: resb 1
	sizet: resw 1
	str: resb 500
	stword: resb 30
	sizew: resw 1
	num: resw 1
	nod: resb 1
section .text
	global _start
_start:
   mov eax, 4
mov ebx, 1
mov ecx, msg1
mov edx, len1
int 80h
mov word[sizet],0

loop_read:
mov edi,stword
cld
mov word[sizew],0
 read_word:
 
        mov eax, 3
	mov ebx, 0
	mov ecx, temp
	mov edx, 1
	int 80h
	
	cmp byte[temp], ' '
	 je end_word

	 
	 cmp byte[temp], 10
	 je end_word
	 
	 mov al,byte[temp]
	 stosb
	 inc word[sizew]
	 jmp read_word
	 
    end_word:
     mov edi,str
     movzx eax,word[sizet]
     add edi,eax
     mov esi,stword
     movzx eax,word[sizew]
     add esi,eax
     sub esi,1
     movzx ecx,word[sizew]
     
     copy:
     mov al,byte[esi]
     mov byte[edi],al
     dec esi
     inc edi
     loop copy
    
     mov ax,word[sizew]
     add word[sizet],ax
     cmp byte[temp],10
     je output
     
     mov byte[edi],' '
     inc word[sizet]
     jmp loop_read
     
     output:
    mov ax,word[sizet]
    mov word[num],ax
    call print_num
    
mov eax, 4
mov ebx, 1
mov ecx, msg2
mov edx, len2
int 80h
     
mov eax, 4
mov ebx, 1
mov ecx, str
mov edx, sizet
int 80h
  
 jmp exit
 
  print_num:
  pusha
  cmp word[num],0
  jl negative
  je zero
  resume: mov byte[nod],0
  extract_no:
    cmp word[num], 0
    je print_no
    inc byte[nod]
    mov edx, 0
    mov ebx,0
    mov ax, word[num]
    mov bx, 10
    div bx
    push dx
    mov word[num], ax
  jmp extract_no


  print_no:
    
    cmp byte[nod], 0
    je end_print
    dec byte[nod]
    pop dx
    mov byte[temp],dl
    add byte[temp], 30h


    mov eax, 4
    mov ebx, 1
    mov ecx, temp
    mov edx, 1
    int 80h
    
    jmp print_no
    
negative:
 call sign_invert
 jmp resume
 
 zero:
 mov byte[temp],30h
    mov eax, 4
    mov ebx, 1
    mov ecx, temp
    mov edx, 1
    int 80h
 
 
  end_print:   
  popa
  ret 
 sign_invert:
  pusha
   mov eax, 4
    mov ebx, 1
    mov ecx, minus
    mov edx, 1
    int 80h
  mov ax,word[num]
  mov bx,-1
  mul bx
  mov word[num],ax
  popa
  ret   
     exit:
     mov eax, 1
     mov ebx, 0
     int 80h
	
